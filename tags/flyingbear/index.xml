<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flyingbear on 楽しいことしかやりたくない。</title>
    <link>https://m0a.github.io/tags/flyingbear/index.xml</link>
    <description>Recent content in Flyingbear on 楽しいことしかやりたくない。</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Written by m0a</copyright>
    <atom:link href="https://m0a.github.io/tags/flyingbear/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OrangePi liteをつかってプリンタにwifi機能をつけよう(Ansible使って自動化するよ)</title>
      <link>https://m0a.github.io/post/orange-pi-lite/</link>
      <pubDate>Thu, 03 Nov 2016 14:45:15 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/orange-pi-lite/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/o15drKg.jpg&#34; alt=&#34;http://i.imgur.com/o15drKg.jpg&#34; /&gt;
OrangePi Liteを買いました。名刺サイズながら最初からWifiが搭載されているやつです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/m0a/items/6608feb654c64ea45dd1&#34;&gt;早速wifiを有効化させるところまで纏めましたが&lt;/a&gt;、Qiitaではいまいち人気がない様子。&lt;/p&gt;

&lt;p&gt;気を取り直して、当初の目的であるOctoPrintを導入します。
ラズパイみたいな人気のやつの場合は最初からOctoPiというのがありまして
SDカードにイメージを入れるだけで全部入りの環境が手に入ります。&lt;/p&gt;

&lt;p&gt;でもこいつは安いのが魅力。本体だけなら1200円くらいです。&lt;/p&gt;

&lt;p&gt;OctoPiほどではないけどAnsibleをつかって全自動で構築まで持っていきましょう。
仮にSDが壊れても瞬時に復旧できるように。&lt;/p&gt;

&lt;h1 id=&#34;ansibleって&#34;&gt;Ansibleって&lt;/h1&gt;

&lt;p&gt;自分のPCからOrangePiにsshアクセスして自動で必要なコマンドやファイルコピーを行って
環境を自動構築してくれるツールです。こいつを使えば、SDにイメージを焼く程にすぐには出来ませんが&lt;br /&gt;
待ってれば環境を作ってくれます。&lt;/p&gt;

&lt;h1 id=&#34;wifiの設定までは自動化出来ず&#34;&gt;wifiの設定までは自動化出来ず。&lt;/h1&gt;

&lt;p&gt;ということで少なくともssh接続できるように&lt;br /&gt;
wifi経由でsshできる状態まで設定しておく必要があります。&lt;/p&gt;

&lt;p&gt;その手順はQiitaに纏めましたのでご参照下さい&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/m0a/items/6608feb654c64ea45dd1&#34;&gt;OrangePi LiteのWIFI設定(armbian)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;固定Ipを使ったほうがいいでしょうね。&lt;/p&gt;

&lt;h1 id=&#34;ansibleの準備&#34;&gt;Ansibleの準備&lt;/h1&gt;

&lt;p&gt;macであればbrewコマンドで簡単にインストールできます。
windowsの場合も最近はlinux環境があるそうなんで簡単じゃないでしょうか？
macなら以下で入ると思います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; brew install ansible
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;windowsは自分で調べて下さい。ubuntu環境を手元に作れるはずです。&lt;/p&gt;

&lt;h1 id=&#34;構築開始&#34;&gt;構築開始&lt;/h1&gt;

&lt;p&gt;必要なファイルをgitで取得します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ❯ git clone https://github.com/m0a/octoprint_armbian.git
  ❯ cd octoprint_armbian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接続するときのipを設定します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ❯ cat hosts   
[octoprint_server]
192.168.11.111
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここを自分の設定したOrangePiのipに変えて下さい&lt;/p&gt;

&lt;p&gt;sudo時のパスワードを設定しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ❯ cat group_vars/octoprint_server.yml 
ansible_sudo_pass: p@ssword

octoprint_version: 1.2.17
.......
%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;p@sswordのところを適時変えて下さい&lt;/p&gt;

&lt;p&gt;後はオプションでバージョンの変更をして下さい(octoprint_versionにTagを指定できます。)&lt;/p&gt;

&lt;p&gt;コレで構築開始です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ❯ ansible-playbook -i hosts playbook.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは待つだけのはず。&lt;/p&gt;

&lt;p&gt;OctoPrintとカメラの設定が終わります。
カメラは普通のUSBWEBカメラならなんでも良いかと思います。&lt;br /&gt;
俺はこいつを使っています。&lt;br /&gt;
&lt;a href=&#34;https://www.amazon.co.jp/LOGICOOL-%E3%82%A6%E3%82%A7%E3%83%96%E3%82%AB%E3%83%A0-HD%E7%94%BB%E8%B3%AA-120%E4%B8%87%E7%94%BB%E7%B4%A0-C270/dp/B003YUB660&#34;&gt;LOGICOOL ウェブカム HD画質 120万画素 C270&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こんな画面になればokです。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/orange-pi-lite/octoprint.jpg&#34; alt=&#34;octoprint.jpg&#34;&gt;


&lt;p&gt;デフォルトでタイムラプスを取るように設定済みです。&lt;/p&gt;

&lt;div class=&#34;embed video-player&#34;&gt;

&lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34;
  width=&#34;640&#34; height=&#34;385&#34;
  src=&#34;https://www.youtube.com/embed/aNHr-nNFhQs&#34;
  allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;

&lt;/div&gt;


&lt;p&gt;なんだか久しぶりに触ったら色々機能が追加されてるみたいですね。色々いじりがいがありそうです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Marlinを改造して残り時間を表示させたい</title>
      <link>https://m0a.github.io/post/modify_marlin/</link>
      <pubDate>Tue, 18 Oct 2016 20:22:31 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/modify_marlin/</guid>
      <description>

&lt;img src=&#34;https://m0a.github.io/images/posts/modify_marlin/ETE.jpg&#34; alt=&#34;ETE.jpg&#34;&gt;


&lt;p&gt;同じことを考えている人はいる。&lt;br /&gt;
&lt;a href=&#34;https://github.com/MarlinFirmware/Marlin/issues/2181#issuecomment-106572076&#34;&gt;Display time remaining on the LCD screen ?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SDカードの読み取り状況と現状の印刷時間から逆算する方針なら情報は出揃っているから簡単でした。&lt;/p&gt;

&lt;h1 id=&#34;実装結果&#34;&gt;実装結果&lt;/h1&gt;

&lt;p&gt;Marlinのコードはこちらにあります。
flyingbearP902用の設定になっています
&lt;a href=&#34;https://github.com/m0a/flyingbearMarlin/archive/lcd_kai.zip&#34;&gt;https://github.com/m0a/flyingbearMarlin/archive/lcd_kai.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;実際のところSDカードの進捗は正確ではなくコレを元に印刷時間を表示するとあまり正確な値にならない。&lt;br /&gt;
ただ後半90%以上進行するとまぁまぁ正確にはなる(当たり前か)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://reprap.org/wiki/G-code#M73:_Set_build_percentage&#34;&gt;M73というGCODE&lt;/a&gt;をMarlinに実装すると正確になるかもしれない。&lt;/p&gt;

&lt;h1 id=&#34;変更内容&#34;&gt;変更内容&lt;/h1&gt;

&lt;p&gt;ちょっとテスト的に弄ったものも含まれています。&lt;br /&gt;
あと中華ArduinoだったせいかBAUDRATEも25000では上手く動かず115200に変更しています&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;diff --git a/Marlin/Configuration.h b/Marlin/Configuration.h
index ad869b7..a730543 100644
--- a/Marlin/Configuration.h
+++ b/Marlin/Configuration.h
@@ -113,7 +113,7 @@
 
 // This determines the communication speed of the printer
 // :[2400,9600,19200,38400,57600,115200,250000]
-#define BAUDRATE 250000
+#define BAUDRATE 115200
 
 // Enable the Bluetooth serial interface on AT90USB devices
 //#define BLUETOOTH
@@ -126,7 +126,7 @@
 
 // Optional custom name for your RepStrap or other custom machine
 // Displayed in the LCD &amp;quot;Ready&amp;quot; message
-//#define CUSTOM_MACHINE_NAME &amp;quot;3D Printer&amp;quot;
+#define CUSTOM_MACHINE_NAME &amp;quot;Flyingbear&amp;quot;
 
 // Define this to set a unique identifier for this printer, (Used by some programs to differentiate between machines)
 // You can use an online service to generate a random UUID. (eg http://www.uuidgenerator.net/version4)
@@ -229,7 +229,7 @@
 #define TEMP_SENSOR_1 0
 #define TEMP_SENSOR_2 0
 #define TEMP_SENSOR_3 0
-#define TEMP_SENSOR_BED 0
+#define TEMP_SENSOR_BED 1
 
 // This makes temp sensor 1 a redundant sensor for sensor 0. If the temperatures difference between these sensors is to high the print will be aborted.
 //#define TEMP_SENSOR_1_AS_REDUNDANT
@@ -419,13 +419,22 @@
   //#define ENDSTOPPULLUP_ZMIN_PROBE
 #endif
 
+#ifdef ENDSTOPPULLUPS
+  #define ENDSTOPPULLUP_XMAX
+  #define ENDSTOPPULLUP_YMAX
+  #define ENDSTOPPULLUP_ZMAX
+  #define ENDSTOPPULLUP_XMIN
+  #define ENDSTOPPULLUP_YMIN
+  #define ENDSTOPPULLUP_ZMIN
+#endif
+
 // Mechanical endstop with COM to ground and NC to Signal uses &amp;quot;false&amp;quot; here (most common setup).
-#define X_MIN_ENDSTOP_INVERTING false // set to true to invert the logic of the endstop.
-#define Y_MIN_ENDSTOP_INVERTING false // set to true to invert the logic of the endstop.
-#define Z_MIN_ENDSTOP_INVERTING false // set to true to invert the logic of the endstop.
-#define X_MAX_ENDSTOP_INVERTING false // set to true to invert the logic of the endstop.
-#define Y_MAX_ENDSTOP_INVERTING false // set to true to invert the logic of the endstop.
-#define Z_MAX_ENDSTOP_INVERTING false // set to true to invert the logic of the endstop.
+#define X_MIN_ENDSTOP_INVERTING true // set to true to invert the logic of the endstop.
+#define Y_MIN_ENDSTOP_INVERTING true // set to true to invert the logic of the endstop.
+#define Z_MIN_ENDSTOP_INVERTING true // set to true to invert the logic of the endstop.
+#define X_MAX_ENDSTOP_INVERTING true // set to true to invert the logic of the endstop.
+#define Y_MAX_ENDSTOP_INVERTING true // set to true to invert the logic of the endstop.
+#define Z_MAX_ENDSTOP_INVERTING true // set to true to invert the logic of the endstop.
 #define Z_MIN_PROBE_ENDSTOP_INVERTING false // set to true to invert the logic of the endstop.
 
 //===========================================================================
@@ -576,13 +585,13 @@
 
 // Invert the stepper direction. Change (or reverse the motor connector) if an axis goes the wrong way.
 #define INVERT_X_DIR false
-#define INVERT_Y_DIR true
-#define INVERT_Z_DIR false
+#define INVERT_Y_DIR false
+#define INVERT_Z_DIR true
 
 // @section extruder
 
 // For direct drive extruder v9 set to true, for geared extruder set to false.
-#define INVERT_E0_DIR false
+#define INVERT_E0_DIR true
 #define INVERT_E1_DIR false
 #define INVERT_E2_DIR false
 #define INVERT_E3_DIR false
@@ -608,9 +617,9 @@
 #define X_MIN_POS 0
 #define Y_MIN_POS 0
 #define Z_MIN_POS 0
-#define X_MAX_POS 200
-#define Y_MAX_POS 200
-#define Z_MAX_POS 200
+#define X_MAX_POS 220
+#define Y_MAX_POS 220
+#define Z_MAX_POS 270
 
 //===========================================================================
 //========================= Filament Runout Sensor ==========================
@@ -749,12 +758,12 @@
 
 // default settings
 
-#define DEFAULT_AXIS_STEPS_PER_UNIT   {80,80,4000,500}  // default steps per unit for Ultimaker
-#define DEFAULT_MAX_FEEDRATE          {300, 300, 5, 25}    // (mm/sec)
-#define DEFAULT_MAX_ACCELERATION      {3000,3000,100,10000}    // X, Y, Z, E maximum start speed for accelerated moves. E default values are good for Skeinforge 40+, for older versions raise them a lot.
+#define DEFAULT_AXIS_STEPS_PER_UNIT   {100,100,800,92.6}  // default steps per unit for Ultimaker
+#define DEFAULT_MAX_FEEDRATE          {330, 330, 5, 25}    // (mm/sec)
+#define DEFAULT_MAX_ACCELERATION      {4000,4000,90,8000}    // X, Y, Z, E maximum start speed for accelerated moves. E default values are good for Skeinforge 40+, for older versions raise them a lot.
 
-#define DEFAULT_ACCELERATION          3000    // X, Y, Z and E acceleration in mm/s^2 for printing moves
-#define DEFAULT_RETRACT_ACCELERATION  3000    // E acceleration in mm/s^2 for retracts
+#define DEFAULT_ACCELERATION          500    // X, Y, Z and E acceleration in mm/s^2 for printing moves
+#define DEFAULT_RETRACT_ACCELERATION  1500    // E acceleration in mm/s^2 for retracts
 #define DEFAULT_TRAVEL_ACCELERATION   3000    // X, Y, Z acceleration in mm/s^2 for travel (non printing) moves
 
 // The speed change that does not require acceleration (i.e. the software might assume it can be done instantaneously)
@@ -811,13 +820,13 @@
 // @section temperature
 
 // Preheat Constants
-#define PREHEAT_1_TEMP_HOTEND 180
-#define PREHEAT_1_TEMP_BED     70
-#define PREHEAT_1_FAN_SPEED     0 // Value from 0 to 255
+#define PREHEAT_1_TEMP_HOTEND 206
+#define PREHEAT_1_TEMP_BED     65
+#define PREHEAT_1_FAN_SPEED   255 // Value from 0 to 255
 
 #define PREHEAT_2_TEMP_HOTEND 240
-#define PREHEAT_2_TEMP_BED    110
-#define PREHEAT_2_FAN_SPEED     0 // Value from 0 to 255
+#define PREHEAT_2_TEMP_BED     65
+#define PREHEAT_2_FAN_SPEED   255 // Value from 0 to 255
 
 //
 // Nozzle Park -- EXPERIMENTAL
@@ -918,7 +927,7 @@
 //  - Total time printing
 //
 // This information can be viewed by the M78 command.
-//#define PRINTCOUNTER
+#define PRINTCOUNTER
 
 //=============================================================================
 //============================= LCD and SD support ============================
@@ -981,7 +990,7 @@
 // SD Card support is disabled by default. If your controller has an SD slot,
 // you must uncomment the following option or it won&#39;t work.
 //
-//#define SDSUPPORT
+#define SDSUPPORT
 
 //
 // SD CARD: SPI SPEED
@@ -991,14 +1000,14 @@
 //
 //#define SPI_SPEED SPI_HALF_SPEED
 //#define SPI_SPEED SPI_QUARTER_SPEED
-//#define SPI_SPEED SPI_EIGHTH_SPEED
+#define SPI_SPEED SPI_EIGHTH_SPEED
 
 //
 // SD CARD: ENABLE CRC
 //
 // Use CRC checks and retries on the SD communication.
 //
-//#define SD_CHECK_AND_RETRY
+#define SD_CHECK_AND_RETRY
 
 //
 // ENCODER SETTINGS
@@ -1125,7 +1134,7 @@
 //
 // Note: Usually sold with a white PCB.
 //
-//#define REPRAP_DISCOUNT_SMART_CONTROLLER
+#define REPRAP_DISCOUNT_SMART_CONTROLLER
 
 //
 // GADGETS3D G3D LCD/SD Controller
@@ -1308,7 +1317,7 @@
 // Uncomment below to enable
 //#define FILAMENT_WIDTH_SENSOR
 
-#define DEFAULT_NOMINAL_FILAMENT_DIA 3.00  //Enter the diameter (in mm) of the filament generally used (3.0 mm or 1.75 mm) - this is then used in the slicer software.  Used for sensor reading validation
+#define DEFAULT_NOMINAL_FILAMENT_DIA 1.75  //Enter the diameter (in mm) of the filament generally used (3.0 mm or 1.75 mm) - this is then used in the slicer software.  Used for sensor reading validation
 
 #if ENABLED(FILAMENT_WIDTH_SENSOR)
   #define FILAMENT_SENSOR_EXTRUDER_NUM 0   //The number of the extruder that has the filament sensor (0,1,2)
diff --git a/Marlin/Configuration_adv.h b/Marlin/Configuration_adv.h
index a822c83..82bc149 100644
--- a/Marlin/Configuration_adv.h
+++ b/Marlin/Configuration_adv.h
@@ -403,7 +403,7 @@
 // @section lcd
 
 // Include a page of printer information in the LCD Main Menu
-//#define LCD_INFO_MENU
+#define LCD_INFO_MENU
 
 #if ENABLED(SDSUPPORT)
 
diff --git a/Marlin/Marlin_main.cpp b/Marlin/Marlin_main.cpp
index d1c4876..fe36013 100644
--- a/Marlin/Marlin_main.cpp
+++ b/Marlin/Marlin_main.cpp
@@ -3996,6 +3996,7 @@ inline void gcode_M17() {
    */
   inline void gcode_M23() {
     card.openFile(current_command_args, true);
+    print_job_timer.setFileSize(card.getFileSize());
   }
 
   /**
diff --git a/Marlin/cardreader.h b/Marlin/cardreader.h
index 8c22e58..3bb11f3 100644
--- a/Marlin/cardreader.h
+++ b/Marlin/cardreader.h
@@ -75,7 +75,9 @@ public:
   FORCE_INLINE int16_t get() { sdpos = file.curPosition(); return (int16_t)file.read(); }
   FORCE_INLINE void setIndex(long index) { sdpos = index; file.seekSet(index); }
   FORCE_INLINE uint8_t percentDone() { return (isFileOpen() &amp;amp;&amp;amp; filesize) ? sdpos / ((filesize + 99) / 100) : 0; }
+  FORCE_INLINE float   percentDoneF() { return (isFileOpen() &amp;amp;&amp;amp; filesize) ? sdpos / ((filesize + 99.0) / 100.0): 0.0; }
   FORCE_INLINE char* getWorkDirName() { workDir.getFilename(filename); return filename; }
+  FORCE_INLINE uint32_t getFileSize() { return (isFileOpen()) ? filesize: 0; }
 
 public:
   bool saving, logging, sdprinting, cardOK, filenameIsDir;
diff --git a/Marlin/printcounter.cpp b/Marlin/printcounter.cpp
index b6cef6e..4314ca4 100644
--- a/Marlin/printcounter.cpp
+++ b/Marlin/printcounter.cpp
@@ -51,6 +51,7 @@ void PrintCounter::incFilamentUsed(double const &amp;amp;amount) {
   if (!this-&amp;gt;isLoaded()) return;
 
   this-&amp;gt;data.filamentUsed += amount; // mm
+  this-&amp;gt;currentFile.filamentUsed += amount; // mm
 }
 
 
@@ -60,7 +61,11 @@ void PrintCounter::initStats() {
   #endif
 
   this-&amp;gt;loaded = true;
-  this-&amp;gt;data = { 0, 0, 0, 0, 0.0 };
+  this-&amp;gt;data = { 0, 0, 0, 0, 0.0,
+      {0, 0, 0.0},
+      {0, 0, 0.0},
+      {0, 0, 0.0}
+    };
 
   this-&amp;gt;saveStats();
   eeprom_write_byte((uint8_t *) this-&amp;gt;address, 0x16);
@@ -143,6 +148,55 @@ void PrintCounter::showStats() {
   SERIAL_ECHOPGM(&amp;quot;m&amp;quot;);
 
   SERIAL_EOL;
+
+  SERIAL_PROTOCOLPGM(MSG_STATS);
+
+  SERIAL_ECHOPGM(&amp;quot;current file size: &amp;quot;);
+  SERIAL_ECHO(this-&amp;gt;currentFile.size);
+  SERIAL_ECHOPGM(&amp;quot;filament used: &amp;quot;);
+  SERIAL_ECHO(this-&amp;gt;currentFile.filamentUsed);
+  SERIAL_ECHOPGM(&amp;quot;mm&amp;quot;);
+  SERIAL_ECHOPGM(&amp;quot; print time: &amp;quot;);
+  SERIAL_ECHO(this-&amp;gt;currentFile.printTime);
+
+  SERIAL_EOL;
+
+  SERIAL_PROTOCOLPGM(MSG_STATS);
+
+  SERIAL_ECHOPGM(&amp;quot;file1 size: &amp;quot;);
+  SERIAL_ECHO(this-&amp;gt;data.file1.size);
+  SERIAL_ECHOPGM(&amp;quot; filament used: &amp;quot;);
+  SERIAL_ECHO(this-&amp;gt;data.file1.filamentUsed);
+  SERIAL_ECHOPGM(&amp;quot;mm&amp;quot;);
+  SERIAL_ECHOPGM(&amp;quot; print time: &amp;quot;);
+  SERIAL_ECHO(this-&amp;gt;data.file1.printTime);
+
+  SERIAL_EOL;
+
+  SERIAL_PROTOCOLPGM(MSG_STATS);
+
+  SERIAL_ECHOPGM(&amp;quot;file2 size: &amp;quot;);
+  SERIAL_ECHO(this-&amp;gt;data.file2.size);
+  SERIAL_ECHOPGM(&amp;quot;filament used: &amp;quot;);
+  SERIAL_ECHO(this-&amp;gt;data.file2.filamentUsed);
+  SERIAL_ECHOPGM(&amp;quot;mm&amp;quot;);
+  SERIAL_ECHOPGM(&amp;quot; print time: &amp;quot;);
+  SERIAL_ECHO(this-&amp;gt;data.file2.printTime);
+
+  SERIAL_EOL;
+
+  SERIAL_PROTOCOLPGM(MSG_STATS);
+
+  SERIAL_ECHOPGM(&amp;quot;file3 size: &amp;quot;);
+  SERIAL_ECHO(this-&amp;gt;data.file3.size);
+  SERIAL_ECHOPGM(&amp;quot;filament used: &amp;quot;);
+  SERIAL_ECHO(this-&amp;gt;data.file3.filamentUsed);
+  SERIAL_ECHOPGM(&amp;quot;mm&amp;quot;);
+  SERIAL_ECHOPGM(&amp;quot; print time: &amp;quot;);
+  SERIAL_ECHO(this-&amp;gt;data.file3.printTime);
+
+  SERIAL_EOL;
+
 }
 
 void PrintCounter::tick() {
@@ -162,6 +216,7 @@ void PrintCounter::tick() {
     #endif
 
     this-&amp;gt;data.printTime += this-&amp;gt;deltaDuration();
+    this-&amp;gt;currentFile.printTime = this-&amp;gt;duration();
     update_last = now;
   }
 
@@ -185,6 +240,8 @@ bool PrintCounter::start() {
     if (!paused) {
       this-&amp;gt;data.totalPrints++;
       this-&amp;gt;lastDuration = 0;
+      this -&amp;gt; currentFile.printTime = 0;
+      this -&amp;gt; currentFile.filamentUsed = 0;
     }
     return true;
   }
@@ -204,6 +261,11 @@ bool PrintCounter::stop() {
     if (this-&amp;gt;duration() &amp;gt; this-&amp;gt;data.longestPrint)
       this-&amp;gt;data.longestPrint = this-&amp;gt;duration();
 
+    this-&amp;gt;currentFile.printTime = this-&amp;gt;duration();
+    this-&amp;gt;data.file3 = this-&amp;gt;data.file2;
+    this-&amp;gt;data.file2 = this-&amp;gt;data.file1;
+    this-&amp;gt;data.file1 = this-&amp;gt;currentFile;
+
     this-&amp;gt;saveStats();
     return true;
   }
@@ -218,8 +280,17 @@ void PrintCounter::reset() {
 
   super::reset();
   this-&amp;gt;lastDuration = 0;
+  this-&amp;gt;currentFile.filamentUsed = 0.0;
+  this-&amp;gt;currentFile.printTime = 0;
 }
 
+void PrintCounter::setFileSize(uint32_t size) {
+  this-&amp;gt;currentFile.size = size;
+}
+
+printFile PrintCounter::getCurrentFile() {
+  return this-&amp;gt;currentFile;
+}
 #if ENABLED(DEBUG_PRINTCOUNTER)
 
   void PrintCounter::debug(const char func[]) {
diff --git a/Marlin/printcounter.h b/Marlin/printcounter.h
index 0e9d06f..f81e006 100644
--- a/Marlin/printcounter.h
+++ b/Marlin/printcounter.h
@@ -31,6 +31,11 @@
 
 // Print debug messages with M111 S2
 //#define DEBUG_PRINTCOUNTER
+struct printFile {
+  uint32_t size;
+  uint32_t printTime;
+  double filamentUsed;
+};
 
 struct printStatistics {    // 13 bytes
   //const uint8_t magic;    // Magic header, it will always be 0x16
@@ -39,6 +44,11 @@ struct printStatistics {    // 13 bytes
   uint32_t printTime;       // Accumulated printing time
   uint32_t longestPrint;    // Longest successfull print job
   double   filamentUsed;    // Accumulated filament consumed in mm
+
+  printFile file1;
+  printFile file2;
+  printFile file3;
+
 };
 
 class PrintCounter: public Stopwatch {
@@ -46,6 +56,7 @@ class PrintCounter: public Stopwatch {
     typedef Stopwatch super;
 
     printStatistics data;
+    printFile currentFile;
 
     /**
      * @brief EEPROM address
@@ -161,6 +172,9 @@ class PrintCounter: public Stopwatch {
     bool stop();
     void reset();
 
+    void setFileSize(uint32_t size);
+    printFile getCurrentFile();
+
     #if ENABLED(DEBUG_PRINTCOUNTER)
 
       /**
diff --git a/Marlin/ultralcd_impl_HD44780.h b/Marlin/ultralcd_impl_HD44780.h
index ab120c2..c96366d 100644
--- a/Marlin/ultralcd_impl_HD44780.h
+++ b/Marlin/ultralcd_impl_HD44780.h
@@ -785,6 +785,33 @@ static void lcd_implementation_status_screen() {
 
   #endif // FILAMENT_LCD_DISPLAY
 
+  #define M0A
+  #ifdef M0A //remain time calc
+    if (IS_SD_PRINTING) {
+      float percent = card.percentDoneF();
+      if (percent &amp;gt;= 1.0 &amp;amp;&amp;amp; percent &amp;lt; 100.0) {
+          char buffer[21];
+          memset(buffer, 0, sizeof(buffer));
+          duration_t d = print_job_timer.duration();
+          uint32_t remainTime = uint32_t(d.value  * (100.0 - percent) / percent);
+          d.value = remainTime;
+          d.toString(buffer);
+          lcd.print(&amp;quot;ETE:&amp;quot;);
+          lcd.print(buffer);
+          lcd.print(&amp;quot;   &amp;quot;);
+          return;
+      } else {
+        printFile pf = print_job_timer.getCurrentFile();
+        lcd.print(ftostr12ns(pf.size/1024.0/1024.0));
+        lcd.print(&amp;quot;MB E:&amp;quot;);
+        lcd.print(itostr3(pf.filamentUsed));
+        lcd.print(&amp;quot;mm&amp;quot;);
+        return;
+      }
+    }
+
+  #endif
+
   lcd_print(lcd_status_message);
 }
 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;メインのコードは&lt;code&gt;M0A&lt;/code&gt;で囲んだ部分です&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define M0A
#ifdef M0A //remain time calc
  if (IS_SD_PRINTING) {
    float percent = card.percentDoneF();
    if (percent &amp;gt;= 1.0 &amp;amp;&amp;amp; percent &amp;lt; 100.0) {
        char buffer[21];
        memset(buffer, 0, sizeof(buffer));
        duration_t d = print_job_timer.duration();
        uint32_t remainTime = uint32_t(d.value  * (100.0 - percent) / percent);
        d.value = remainTime;
        d.toString(buffer);
        lcd.print(&amp;quot;ETE:&amp;quot;);
        lcd.print(buffer);
        lcd.print(&amp;quot;   &amp;quot;);
        return;
    } else {
      printFile pf = print_job_timer.getCurrentFile();
      lcd.print(ftostr12ns(pf.size/1024.0/1024.0));
      lcd.print(&amp;quot;MB E:&amp;quot;);
      lcd.print(itostr3(pf.filamentUsed));
      lcd.print(&amp;quot;mm&amp;quot;);
      return;
    }
  }
#endif
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>flyingbear改善</title>
      <link>https://m0a.github.io/post/flyingbear-p902-003/</link>
      <pubDate>Fri, 07 Oct 2016 21:53:52 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/flyingbear-p902-003/</guid>
      <description>

&lt;p&gt;今の環境のスナップショットの図&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-003/start.jpg&#34; alt=&#34;start.jpg&#34;&gt;


&lt;p&gt;買ってからしばらく経ちました。genkei ATOMよりビルドエリアが広がってCADの自由度が増えました(歓喜)&lt;br /&gt;
早速色々変更しましたので纏めてみることにしました&lt;/p&gt;

&lt;h1 id=&#34;ヒートベットの改善&#34;&gt;ヒートベットの改善&lt;/h1&gt;

&lt;p&gt;初期状態ではビルドプレートにブルーシールが貼ってあります。&lt;br /&gt;
今回使っていてとてもいいものだとは思いましたがシールが壊れたら新規に購入しなくてはいけません。&lt;br /&gt;
しかも張替えが面倒くさいのです。&lt;/p&gt;

&lt;p&gt;そこでATOMを使っていた頃に培った方法をまとめさせていただきます&lt;/p&gt;

&lt;p&gt;用意したもの&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;品名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;購入先&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;お値段&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;スタンドミラー&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ダイソー&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;¥108&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;スティックのり&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/%E3%83%88%E3%83%B3%E3%83%9C-%E3%83%88%E3%83%B3%E3%83%9C%E9%89%9B%E7%AD%86-%E3%83%94%E3%83%83%E3%83%88%E3%82%B9%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF%E7%B3%8A-%E3%82%B7%E3%83%AF%E3%81%AA%E3%81%97%E3%83%94%E3%83%83%E3%83%88%E3%82%A2%E3%83%BC%E3%83%88T/dp/B001CR5Q22/ref=sr_1_3?ie=UTF8&amp;amp;qid=1475845373&amp;amp;sr=8-3&amp;amp;keywords=%E3%82%B7%E3%83%AF%E3%81%AA%E3%81%97%E3%83%94%E3%83%83%E3%83%88&#34;&gt;amazon&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;¥76&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;無水エタノール&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/%E5%81%A5%E6%A0%84%E8%A3%BD%E8%96%AC-%E7%84%A1%E6%B0%B4%E3%82%A8%E3%82%BF%E3%83%8E%E3%83%BC%E3%83%ABP-500ml/dp/B000TKDKA8/ref=sr_1_1?s=hpc&amp;amp;ie=UTF8&amp;amp;qid=1475845556&amp;amp;sr=1-1&amp;amp;keywords=%E7%84%A1%E6%B0%B4%E3%82%A8%E3%82%BF%E3%83%8E%E3%83%BC%E3%83%AB&#34;&gt;amazon&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;¥1,280&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;特にスタンドミラーなんですがかなりフィットしてます。&lt;br /&gt;
最初ガラス加工業者にお願いしようとしたところ一枚¥2,100とのことでした。高い、、、、&lt;br /&gt;
ちょっと合わなくても十分です&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-003/daiso_mirror.jpg&#34; alt=&#34;daiso_mirror.jpg&#34;&gt;


&lt;h2 id=&#34;ミラーの加工&#34;&gt;ミラーの加工&lt;/h2&gt;

&lt;p&gt;加工は簡単です。 筐体部分を外してむき出しにするだけです。&lt;br /&gt;
角の安全加工がれてないのでご注意下さい&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-003/daiso_mirror02.jpg&#34; alt=&#34;daiso_mirror02.jpg&#34;&gt;


&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;p&gt;ピットのりを使うのはよくある話だと思いますが&lt;br /&gt;
自分の場合、それだけでは上手く行かず無水エタノールと組み合わせて使うことにしました。&lt;/p&gt;

&lt;p&gt;まず無水エタノールは使いやすいように瓶詰めにしておきます&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-003/daiso_mirror03.jpg&#34; alt=&#34;daiso_mirror03.jpg&#34;&gt;


&lt;p&gt;できればピット乗りにエタノールをつけるのに便利な大きさがいいです&lt;br /&gt;
コレは試しに用意したでけで使いづらかったです。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-003/daiso_mirror04.jpg&#34; alt=&#34;daiso_mirror04.jpg&#34;&gt;


&lt;p&gt;要はノリをエタノールで薄めて薄く塗りつける感じです&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-003/daiso_mirror05.jpg&#34; alt=&#34;daiso_mirror05.jpg&#34;&gt;


&lt;p&gt;今はブルーシールが貼ってある状態で上に乗せて使っています。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-003/daiso_mirror06.jpg&#34; alt=&#34;daiso_mirror06.jpg&#34;&gt;


&lt;h2 id=&#34;メリットとデメリット&#34;&gt;メリットとデメリット&lt;/h2&gt;

&lt;h3 id=&#34;メリット&#34;&gt;メリット&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;面倒くさいカプトンテープ（もしくはブルーテープ）の張替えが要らない&lt;/li&gt;
&lt;li&gt;ガラス板の数だけ素早く載せ替えが可能なのですぐに次の印刷ができる&lt;/li&gt;
&lt;li&gt;メンテナンスが簡単。使えないとと思ったらノリを水道で洗い流すだけ&lt;/li&gt;
&lt;li&gt;印刷物の取り外しが簡単&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;デメリット&#34;&gt;デメリット&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ガラスが割れやすいかも&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;印刷物の取り外しが簡単の理由はガラス板は熱で伸び縮みがあるので
冷却すると自然に剥がれるのです。ほんとうに便利。&lt;/p&gt;

&lt;h1 id=&#34;ヒートベットの改善-2&#34;&gt;ヒートベットの改善#2&lt;/h1&gt;

&lt;p&gt;ヒートベットが広くなった分加熱に時間がかかるので背面に断熱材を貼って改善します。&lt;br /&gt;
ここでもやっぱりダイソーです。&lt;br /&gt;
日本にはダイソーがあるので3Dプリンタの普及が進まないというのはあながち嘘じゃないのかもしれないです。&lt;br /&gt;
使うのはこちら&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-003/nabeshiki.jpg&#34; alt=&#34;nabeshiki.jpg&#34;&gt;


&lt;p&gt;コルク製の鍋敷きです。まぁ鍋敷きなんで本来の目的に近い？&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-003/nabeshiki02.jpg&#34; alt=&#34;nabeshiki02.jpg&#34;&gt;


&lt;p&gt;ほらピッタリ？&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-003/nabeshiki03.jpg&#34; alt=&#34;nabeshiki03.jpg&#34;&gt;


&lt;p&gt;カプトンテープで固定しました。
このときにハンダ付けされていた部分もカプトンテープで絶縁します。
後ほどガラス板はるのにクリップを使うので接触しないようにです&lt;/p&gt;

&lt;h2 id=&#34;改善結果&#34;&gt;改善結果&lt;/h2&gt;

&lt;p&gt;計測したところ&lt;/p&gt;

&lt;p&gt;33度 → 70度 の温度変化までの時間が&lt;br /&gt;
7分45秒 から 7分ジャストにスピードアップしました。&lt;br /&gt;
あんまり変わってないですね。でも100 円ですし、使っていてわかったのですが保温性が上がった感じです&lt;/p&gt;

&lt;h1 id=&#34;rampsの改造&#34;&gt;RAMPSの改造&lt;/h1&gt;

&lt;p&gt;コレは改善というより故障修理に近いです。&lt;/p&gt;

&lt;p&gt;RAMPSといわれる部品が焦げてしまいました&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-003/ramps.jpg&#34; alt=&#34;ramps.jpg&#34;&gt;


&lt;p&gt;焼けてターミナルブロックが固まっています。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-003/ramps02.jpg&#34; alt=&#34;ramps02.jpg&#34;&gt;


&lt;p&gt;取り替えてもいいのですが、他の人も同じ問題が発生したようなので
配線を直結することにしました。&lt;/p&gt;

&lt;p&gt;表面と裏面です&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-003/ramps04.jpg&#34; alt=&#34;ramps04.jpg&#34;&gt;


&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-003/ramps03.jpg&#34; alt=&#34;ramps03.jpg&#34;&gt;


&lt;p&gt;配線し直します&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-003/ramps05.jpg&#34; alt=&#34;ramps05.jpg&#34;&gt;


&lt;p&gt;配線周りを整理するついでにボードを前面に配置しました&lt;/p&gt;

&lt;p&gt;リセットボタンが押しやすくなりました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ヘッド直結型エクストルーダの扱い</title>
      <link>https://m0a.github.io/post/flyingbear-p902-002/</link>
      <pubDate>Fri, 30 Sep 2016 15:55:43 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/flyingbear-p902-002/</guid>
      <description>

&lt;p&gt;早速壊したかと思いました。
flyingbearはエクストルーダが最初から構築済みだったので楽でしたが&lt;br /&gt;
その分中の仕組みがわからず、壊れたときに対処できないという問題があります。&lt;/p&gt;

&lt;p&gt;これまで使ってきた Genkei ATOMさんは&lt;strong&gt;bowden方式&lt;/strong&gt;のエクストルーダで&lt;br /&gt;
今回のflyingBearは&lt;strong&gt;ヘッド直結型&lt;/strong&gt;のエクストルーダとなります。&lt;br /&gt;
その違いをわかっておらずbowdenタイプと同じようにフィラメントを抜いて取り替えたら大変なことに。&lt;br /&gt;
動かなくなりました。中で多分詰まってます。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-002/extruder01.jpg&#34; alt=&#34;extruder01.jpg&#34;&gt;


&lt;p&gt;上記2箇所のネジを外すとノズルの入り口にアクセスできます。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-002/extruder_open01.jpg&#34; alt=&#34;extruder_open01.jpg&#34;&gt;


&lt;p&gt;お分かりでしょうか？&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-002/nozzule01.jpg&#34; alt=&#34;nozzule01.jpg&#34;&gt;


&lt;p&gt;ノズルの入り口に曲がって詰まっているフィラメントが現れました。&lt;br /&gt;
コレが邪魔して新たにフィラメントが挿入できない事態になっていました。&lt;/p&gt;

&lt;p&gt;恐らく引き抜いたときにフィラメントが伸びて入り口に残ってしまったみたいです。&lt;br /&gt;
直結型の場合はフィラメントを引き抜いたりしないほうが良さそうです&lt;/p&gt;

&lt;p&gt;仕方ないので更にアクセスしやすくするため他の部品も取り除きます&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-002/extruder_open02.jpg&#34; alt=&#34;extruder_open02.jpg&#34;&gt;


&lt;p&gt;ノズルの温度を205度にあげて入口付近のの残ったフィラメントを抜き取り(ちぎり取り？)&lt;br /&gt;
新しいフィラメントを押し込んで通ることを確認します&lt;/p&gt;

&lt;p&gt;せっかくなのでエクストルーダが開放状態でフィラメントを通しておきます。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-002/extruder_open03.jpg&#34; alt=&#34;extruder_open03.jpg&#34;&gt;


&lt;h1 id=&#34;学んだこと&#34;&gt;学んだこと&lt;/h1&gt;

&lt;p&gt;直結型はフィラメントを抜かない。てことですかね。&lt;br /&gt;
とりあえずネジ二本抜けばエクストルーダにアクセスできることはわかったので良かったです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FlyingBear組み立てレポート</title>
      <link>https://m0a.github.io/post/flyingbear-p902-001/</link>
      <pubDate>Fri, 30 Sep 2016 08:25:40 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/flyingbear-p902-001/</guid>
      <description>

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/start.jpg&#34; alt=&#34;start.jpg&#34;&gt;


&lt;p&gt;&lt;a href=&#34;https://www.aliexpress.com/store/product/2016-Free-shiping-Flyingbear-DIY-3d-Printer-kit-Full-metal-Large-printing-size-High-Quality-Precision/2218051_32677798453.html&#34;&gt;flyingbear P902&lt;/a&gt; を買ってみました。購入 &amp;amp; 組み立てレポートをしてみます。&lt;/p&gt;

&lt;!--
果たして騙されずに済むんでしょうか？

すいません。実は2chで買ったという人がいて悪くなさそうだったんで買ってみました。
つまり先行者ではないわけです。すいません
--&gt;

&lt;p&gt;どんな風に届いて、どんな感じで組み立てたかをご覧ください。&lt;/p&gt;

&lt;h1 id=&#34;届くまで&#34;&gt;届くまで&lt;/h1&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/fedex.png&#34; alt=&#34;fedex.png&#34;&gt;


&lt;p&gt;注文したのが17日なので12日で届きました。送料無料なのに速いです。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/arraive.jpg&#34; alt=&#34;arraive.jpg&#34;&gt;


&lt;p&gt;テープでぐるぐる巻きにされていて地味に開けるのがめんどかったです&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/parts-list.jpg&#34; alt=&#34;parts-list.jpg&#34;&gt;


&lt;p&gt;パーツリストが含まれていてその場で梱包漏れをチェックできる！&lt;br /&gt;
と思ったんですが&lt;/p&gt;

&lt;p&gt;パーツ名だけではそれがなんなのかマニュアル動画を見ないとわからないので完璧ではないですね。&lt;br /&gt;
でも、組み立てのときに必要なパーツを探すのがだいぶ楽でした。&lt;br /&gt;
(どのパーツがどの梱包に入っているかパーツリストから分かる)&lt;/p&gt;

&lt;p&gt;組み立て時間は10hくらいです。&lt;/p&gt;

&lt;h1 id=&#34;組み立て&#34;&gt;組み立て&lt;/h1&gt;

&lt;p&gt;組み立てはSDカード内の組み立て用動画を見ながら作業します。
マニュアル類を共有する許可を頂いたのでどんな感じか確認下さい。&lt;/p&gt;

&lt;div class=&#34;embed video-player&#34;&gt;

&lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34;
  width=&#34;640&#34; height=&#34;385&#34;
  src=&#34;https://www.youtube.com/embed/TsnvTCfl9SE&#34;
  allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;

&lt;/div&gt;


&lt;p&gt;組み立て手順は紙媒体じゃなく動画になっており言葉が不要だといえる感じです。&lt;br /&gt;
わかりやすい。事前に全体を見てからのほうが作業時に迷いが減ります。&lt;/p&gt;

&lt;p&gt;以下に動画リストを置いておきます&lt;br /&gt;
&lt;a href=&#34;https://www.youtube.com/playlist?list=PLSNzi__sMkVjOkmHA4wVV4kQLnbIQkAxg&#34;&gt;flyingbear P902 組み立てマニュアル(非公式) &lt;/a&gt;&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/parts-list02.jpg&#34; alt=&#34;parts-list02.jpg&#34;&gt;


&lt;p&gt;パーツリストが凄く便利です。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/alumi.jpg&#34; alt=&#34;alumi.jpg&#34;&gt;


&lt;p&gt;アルミレールの切断時の削り節がそのまま残っているのは困りました。&lt;br /&gt;
これって掃除機で吸い込んで大丈夫なんですかね。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/alumi02.jpg&#34; alt=&#34;alumi02.jpg&#34;&gt;


&lt;p&gt;削った後がそのまま残っていて危ないです。&lt;br /&gt;
マイナスドライバーで無理やり削って対応しました。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/neji.jpg&#34; alt=&#34;neji.jpg&#34;&gt;


&lt;p&gt;ネジは種類ごとに袋詰されていていい感じです。&lt;br /&gt;
惜しむらくはネジの種類がわかるように何か書いていてほしかった。&lt;br /&gt;
ノギスで長さとか太さを図って推測するしかないです。 まぁ間違えなかったみたいです。&lt;/p&gt;

&lt;p&gt;ただ袋の強度が弱いのか、最初から穴が空いていたのか袋の中身が飛び出るので予め補強しておいたほうが良さそうです。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/box.jpg&#34; alt=&#34;box.jpg&#34;&gt;


&lt;p&gt;上記のボックス部分はちゃんとガタツキがないか確認しておいたほうがいいです。&lt;br /&gt;
実はちょっとガタついてしまいました。全部品を組み込んでからの調整は面倒なのでここはしっかり組み立てたほうがいいです。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/extruder.jpg&#34; alt=&#34;extruder.jpg&#34;&gt;


&lt;p&gt;エクストルーダも既に組み立て済みです。正直拍子抜け
難しい部分はすべて組み立て済みとか&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/carriage.jpg&#34; alt=&#34;carriage.jpg&#34;&gt;


&lt;p&gt;重要な部品なのか射出成形品です&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/carriage02.jpg&#34; alt=&#34;carriage02.jpg&#34;&gt;


&lt;p&gt;コレも射出成形品です&lt;/p&gt;

&lt;p&gt;ENDSTOPも必要なところは組み込み済み。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/x-carriage.jpg&#34; alt=&#34;x-carriage.jpg&#34;&gt;


&lt;p&gt;とてもかんたんにキャリッジが組み立て終わりました。&lt;/p&gt;


&lt;video controls&gt;
  &lt;source src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/carriage-anime01.mp4&#34; type=&#34;video/mp4&#34;&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;動作確認でスムーズに動くか確認します。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/z-axis-fixed-block.jpg&#34; alt=&#34;z-axis-fixed-block.jpg&#34;&gt;


&lt;p&gt;上記は&lt;strong&gt;z axis fixed block&lt;/strong&gt;という部品です。&lt;br /&gt;
この部品は下記にあるZ軸の固定用のブロックなのですがコレだけはロッドと大きさがぎりぎり合わず&lt;br /&gt;
ヤスリがけしました。ちょっとやすれば入るので4つを頑張ってヤスリがけ。&lt;br /&gt;
本当にギリギリ合わない感じなのでちょっとやすれば入るようになります。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/z-carriage.jpg&#34; alt=&#34;z-carriage.jpg&#34;&gt;


&lt;p&gt;Z軸もOK
Z軸用のENDSTOPはこの製品には珍しく3DPrinter出力されたものでした。&lt;br /&gt;
flyingbearで出力したんでしょうか？&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/heatbed.jpg&#34; alt=&#34;heatbed.jpg&#34;&gt;


&lt;p&gt;ヒートベットも取り付けます。すぐ印刷できるようにブルーテープがすでに貼ってあります。&lt;br /&gt;
SDカードにtest用のデータも置いてあるので完成後すぐに動作確認できるのが凄くいいです。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/imoneji.jpg&#34; alt=&#34;imoneji.jpg&#34;&gt;


&lt;p&gt;恐らくロッド固定用でイモネジを入れる穴だと思うんですが説明書に指示がなかったので組立時は放置しています&lt;br /&gt;
(あとでイモネジ入れておきました。)&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/motherboard.jpg&#34; alt=&#34;motherboard.jpg&#34;&gt;


&lt;p&gt;マザーボードに当たるRAMPS+Arduino MEGAもファン込みで組み立て済みで感動しました。&lt;br /&gt;
と見せかけて&lt;strong&gt;上のファン部分を取り除かないと配線できないみたいです。&lt;/strong&gt;&lt;br /&gt;
そもそもアクリル板の保護シートがそのままなので一度分解しないとだめです。&lt;/p&gt;

&lt;img src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/ac-dc.jpg&#34; alt=&#34;ac-dc.jpg&#34;&gt;


&lt;p&gt;中華の電源はちょっと怖いです。&lt;br /&gt;
薄っすらと読める合格証の字も逆に怖い。&lt;/p&gt;


&lt;video controls&gt;
  &lt;source src=&#34;https://m0a.github.io/images/posts/flyingbear-p902-001/end.mp4&#34; type=&#34;video/mp4&#34;&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;いきなり電源投入したら動きました。&lt;/p&gt;

&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;

&lt;h2 id=&#34;良かった点&#34;&gt;良かった点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;組み立てマニュアルは動画で提供でわかりやすい。&lt;/li&gt;
&lt;li&gt;ヒートベットにブルーテープが張ってありSDカードにテスト用のGCODEも置いてあるのですぐに組み立て後テスト可能&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;イマイチな点&#34;&gt;イマイチな点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;どうせなら印刷手順も動画で説明が欲しかった&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PCと一度も接続すること無く印刷テストができるように出来ています。&lt;/strong&gt;&lt;br /&gt;
でもその部分の説明がないのではじめての3DPrintという人には不親切でそこだけは惜しい感じです。&lt;br /&gt;
もうちょっとですね。&lt;/p&gt;

&lt;h2 id=&#34;気をつけたほうがいいこと&#34;&gt;気をつけたほうがいいこと&lt;/h2&gt;

&lt;p&gt;後ほど別途纏めますがヒートベット用の電源接続用のターミナルブロックが焼けてしまいました。&lt;br /&gt;
ヒートベットが広い分電源周りの配線は気をつけたほうが良さそうです。&lt;/p&gt;

&lt;p&gt;次はkisslicerからの使い方を研究してみます&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>