<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flyingbear on 楽しいことしかやりたくない。</title>
    <link>https://m0a.github.io/tags/flyingbear/</link>
    <description>Recent content in Flyingbear on 楽しいことしかやりたくない。</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 28 Mar 2017 23:12:01 +0900</lastBuildDate>
    
	<atom:link href="https://m0a.github.io/tags/flyingbear/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>octoprintをbitbarを使って便利にしよう</title>
      <link>https://m0a.github.io/post/octoprint001/</link>
      <pubDate>Tue, 28 Mar 2017 23:12:01 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/octoprint001/</guid>
      <description>octoprintを便利に使うためにbitbarのプラグインを作りました。 多分linux環境(Gnome環境？)でも、
argosなどで使えると思います
見ての通りbitbarとはメニューバーを簡単に拡張できる機能のことです。 mac限定なのが悲しい。
こちらにプラグインへのリンクを置きますね。
https://getbitbar.com/plugins/Tools/octoprint.1m.sh</description>
    </item>
    
    <item>
      <title>flyingbearのエクストルーダを改造しました。</title>
      <link>https://m0a.github.io/post/flyingbear-p902-004/</link>
      <pubDate>Thu, 02 Mar 2017 21:17:40 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/flyingbear-p902-004/</guid>
      <description>flyingbearは値段の割にとても素敵なプリンタですが、色々調整しないとなかなか性能が出ません
今回のエクストルーダ改造はかなりいい感じでしたのでここに纏めてみます。
はじめに 先ず今回の改造はどういう方針かといいますと。 バレルを3cm延長し空間を作りその隙間からシロッコファンで送風するように改造します。 したがってデメリットがあります。
ズバリ
Z方向の印刷範囲が3cm小さくなります。
ですが結果は劇的でした。
そしてオーバーハングのテストがこちら
赤フィラメントが改造前のflyingbear(途中で印刷中止)
茶色フィラメントが改造後です。
70度以降に乱れがありますか積層0.1で行ったためです。0.05で試せばまた変わるかもしれません。
追加で必要な部品について 改造したSTLはthigiverseで公開中です。 改造に必要なものは以下の通り
   追加内容 個数 リンク 金額 備考     プリントパーツ 2 thingiverse 0円    シロッコファン 5015S 1 aliexpress 200円    50mm バレル 1 aliexpress 122円    M6 Nut or heatsink 4 aliexpress 909円 ヒートシンクの代用になるもの   シロッコファン固定用木ネジ 2 その辺のホームセンター 300円 flyingbear付属のネジを参考に購入    aliexpressのお陰で1500円くらいで素材は揃います。aliexpressは本当に便利です。</description>
    </item>
    
    <item>
      <title>octoprintのタイムラプスをstreamableに自動アップロード</title>
      <link>https://m0a.github.io/post/up2streamable001/</link>
      <pubDate>Tue, 28 Feb 2017 15:07:34 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/up2streamable001/</guid>
      <description>octoprintをつかってタイムラプスを取るのは楽しいですが、
どうにもサイズがでかいのでSDカードを逼迫するような気もします。
ところでstreamableってサービスをご存知でしょうか？
imgurの動画版みたいなやつです。
とりあえず動画をアップして共有しようというサービスです。
そこでこいつに自動アップロードする機能をoctoprintにつけられないかな？と思いました。
作りました。
golangのライブラリが提供されていたのでアホみたいに簡単なので、 正直ツール化する意味はあるのかという気もしますが。
先ずはstreamable/signupからアカントを作っておきます。
そうしないと削除できないので。
octoprintが動いているサーバ(raspberypiかorangepi等のarm環境限定です)から以下のコマンドで取得します
またoctoprintを動かすユーザはoctoprintだと仮定しています
sudo su - octoprint cd ~/bin wget https://github.com/m0a/up2streamable/releases/download/0.1/up2streamable chmod +x up2streamable  以下のコマンドを実行します
up2streamable -path ~/.octoprint/timelapse -u userid -p password  ~/.octoprint/timelapseに動画が格納されていればuploadが成功します
成功したらcronで設定しておきます。
 HOME=/home/octoprint */15 * * * * $HOME/bin/up2streamable -path $HOME/.octoprint/timelapse -u username -p password -delete  以上です。オプションに -deleteを指定することで自動削除します。
 </description>
    </item>
    
    <item>
      <title>OrangePi liteをつかってプリンタにwifi機能をつけよう(Ansible使って自動化するよ)</title>
      <link>https://m0a.github.io/post/orange-pi-lite/</link>
      <pubDate>Thu, 03 Nov 2016 14:45:15 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/orange-pi-lite/</guid>
      <description>OrangePi Liteを買いました。名刺サイズながら最初からWifiが搭載されているやつです。
早速wifiを有効化させるところまで纏めましたが、Qiitaではいまいち人気がない様子。
気を取り直して、当初の目的であるOctoPrintを導入します。 ラズパイみたいな人気のやつの場合は最初からOctoPiというのがありまして SDカードにイメージを入れるだけで全部入りの環境が手に入ります。
でもこいつは安いのが魅力。本体だけなら1200円くらいです。
OctoPiほどではないけどAnsibleをつかって全自動で構築まで持っていきましょう。 仮にSDが壊れても瞬時に復旧できるように。
Ansibleって 自分のPCからOrangePiにsshアクセスして自動で必要なコマンドやファイルコピーを行って 環境を自動構築してくれるツールです。こいつを使えば、SDにイメージを焼く程にすぐには出来ませんが
待ってれば環境を作ってくれます。
wifiの設定までは自動化出来ず。 ということで少なくともssh接続できるように
wifi経由でsshできる状態まで設定しておく必要があります。
その手順はQiitaに纏めましたのでご参照下さい
OrangePi LiteのWIFI設定(armbian)
固定Ipを使ったほうがいいでしょうね。
Ansibleの準備 macであればbrewコマンドで簡単にインストールできます。 windowsの場合も最近はlinux環境があるそうなんで簡単じゃないでしょうか？ macなら以下で入ると思います。
 brew install ansible  windowsは自分で調べて下さい。ubuntu環境を手元に作れるはずです。
構築開始 必要なファイルをgitで取得します。
 ❯ git clone https://github.com/m0a/octoprint_armbian.git ❯ cd octoprint_armbian  接続するときのipを設定します
 ❯ cat hosts [octoprint_server] 192.168.11.111  ここを自分の設定したOrangePiのipに変えて下さい
sudo時のパスワードを設定しておきます。
 ❯ cat group_vars/octoprint_server.yml ansible_sudo_pass: p@ssword octoprint_version: 1.2.17 ....... %  p@sswordのところを適時変えて下さい
後はオプションでバージョンの変更をして下さい(octoprint_versionにTagを指定できます。)
コレで構築開始です。
 ❯ ansible-playbook -i hosts playbook.</description>
    </item>
    
    <item>
      <title>Marlinを改造して残り時間を表示させたい</title>
      <link>https://m0a.github.io/post/modify_marlin/</link>
      <pubDate>Tue, 18 Oct 2016 20:22:31 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/modify_marlin/</guid>
      <description>同じことを考えている人はいる。
Display time remaining on the LCD screen ?
SDカードの読み取り状況と現状の印刷時間から逆算する方針なら情報は出揃っているから簡単でした。
実装結果 Marlinのコードはこちらにあります。 flyingbearP902用の設定になっています https://github.com/m0a/flyingbearMarlin/archive/lcd_kai.zip
実際のところSDカードの進捗は正確ではなくコレを元に印刷時間を表示するとあまり正確な値にならない。
ただ後半90%以上進行するとまぁまぁ正確にはなる(当たり前か)
M73というGCODEをMarlinに実装すると正確になるかもしれない。
変更内容 ちょっとテスト的に弄ったものも含まれています。
あと中華ArduinoだったせいかBAUDRATEも25000では上手く動かず115200に変更しています
diff --git a/Marlin/Configuration.h b/Marlin/Configuration.h index ad869b7..a730543 100644 --- a/Marlin/Configuration.h +++ b/Marlin/Configuration.h @@ -113,7 +113,7 @@ // This determines the communication speed of the printer // :[2400,9600,19200,38400,57600,115200,250000] -#define BAUDRATE 250000 +#define BAUDRATE 115200 // Enable the Bluetooth serial interface on AT90USB devices //#define BLUETOOTH @@ -126,7 +126,7 @@ // Optional custom name for your RepStrap or other custom machine // Displayed in the LCD &amp;quot;Ready&amp;quot; message -//#define CUSTOM_MACHINE_NAME &amp;quot;3D Printer&amp;quot; +#define CUSTOM_MACHINE_NAME &amp;quot;Flyingbear&amp;quot; // Define this to set a unique identifier for this printer, (Used by some programs to differentiate between machines) // You can use an online service to generate a random UUID.</description>
    </item>
    
    <item>
      <title>flyingbear改善</title>
      <link>https://m0a.github.io/post/flyingbear-p902-003/</link>
      <pubDate>Fri, 07 Oct 2016 21:53:52 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/flyingbear-p902-003/</guid>
      <description>今の環境のスナップショットの図
買ってからしばらく経ちました。genkei ATOMよりビルドエリアが広がってCADの自由度が増えました(歓喜)
早速色々変更しましたので纏めてみることにしました
ヒートベットの改善 初期状態ではビルドプレートにブルーシールが貼ってあります。
今回使っていてとてもいいものだとは思いましたがシールが壊れたら新規に購入しなくてはいけません。
しかも張替えが面倒くさいのです。
そこでATOMを使っていた頃に培った方法をまとめさせていただきます
用意したもの
   品名 購入先 お値段     スタンドミラー ダイソー ¥108   スティックのり amazon ¥76   無水エタノール amazon ¥1,280    特にスタンドミラーなんですがかなりフィットしてます。
最初ガラス加工業者にお願いしようとしたところ一枚¥2,100とのことでした。高い、、、、
ちょっと合わなくても十分です
ミラーの加工 加工は簡単です。 筐体部分を外してむき出しにするだけです。
角の安全加工がれてないのでご注意下さい
使い方 ピットのりを使うのはよくある話だと思いますが
自分の場合、それだけでは上手く行かず無水エタノールと組み合わせて使うことにしました。
まず無水エタノールは使いやすいように瓶詰めにしておきます
できればピット乗りにエタノールをつけるのに便利な大きさがいいです
コレは試しに用意したでけで使いづらかったです。
要はノリをエタノールで薄めて薄く塗りつける感じです
今はブルーシールが貼ってある状態で上に乗せて使っています。
メリットとデメリット メリット  面倒くさいカプトンテープ（もしくはブルーテープ）の張替えが要らない ガラス板の数だけ素早く載せ替えが可能なのですぐに次の印刷ができる メンテナンスが簡単。使えないとと思ったらノリを水道で洗い流すだけ 印刷物の取り外しが簡単  デメリット  ガラスが割れやすいかも  印刷物の取り外しが簡単の理由はガラス板は熱で伸び縮みがあるので 冷却すると自然に剥がれるのです。ほんとうに便利。
ヒートベットの改善#2 ヒートベットが広くなった分加熱に時間がかかるので背面に断熱材を貼って改善します。
ここでもやっぱりダイソーです。
日本にはダイソーがあるので3Dプリンタの普及が進まないというのはあながち嘘じゃないのかもしれないです。</description>
    </item>
    
    <item>
      <title>ヘッド直結型エクストルーダの扱い</title>
      <link>https://m0a.github.io/post/flyingbear-p902-002/</link>
      <pubDate>Fri, 30 Sep 2016 15:55:43 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/flyingbear-p902-002/</guid>
      <description>早速壊したかと思いました。 flyingbearはエクストルーダが最初から構築済みだったので楽でしたが
その分中の仕組みがわからず、壊れたときに対処できないという問題があります。
これまで使ってきた Genkei ATOMさんはbowden方式のエクストルーダで
今回のflyingBearはヘッド直結型のエクストルーダとなります。
その違いをわかっておらずbowdenタイプと同じようにフィラメントを抜いて取り替えたら大変なことに。
動かなくなりました。中で多分詰まってます。
上記2箇所のネジを外すとノズルの入り口にアクセスできます。
お分かりでしょうか？
ノズルの入り口に曲がって詰まっているフィラメントが現れました。
コレが邪魔して新たにフィラメントが挿入できない事態になっていました。
恐らく引き抜いたときにフィラメントが伸びて入り口に残ってしまったみたいです。
直結型の場合はフィラメントを引き抜いたりしないほうが良さそうです
仕方ないので更にアクセスしやすくするため他の部品も取り除きます
ノズルの温度を205度にあげて入口付近のの残ったフィラメントを抜き取り(ちぎり取り？)
新しいフィラメントを押し込んで通ることを確認します
せっかくなのでエクストルーダが開放状態でフィラメントを通しておきます。
学んだこと 直結型はフィラメントを抜かない。てことですかね。
とりあえずネジ二本抜けばエクストルーダにアクセスできることはわかったので良かったです。</description>
    </item>
    
    <item>
      <title>FlyingBear組み立てレポート</title>
      <link>https://m0a.github.io/post/flyingbear-p902-001/</link>
      <pubDate>Fri, 30 Sep 2016 08:25:40 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/flyingbear-p902-001/</guid>
      <description>flyingbear P902 を買ってみました。購入 &amp;amp; 組み立てレポートをしてみます。
どんな風に届いて、どんな感じで組み立てたかをご覧ください。
届くまで 注文したのが17日なので12日で届きました。送料無料なのに速いです。
テープでぐるぐる巻きにされていて地味に開けるのがめんどかったです
パーツリストが含まれていてその場で梱包漏れをチェックできる！
と思ったんですが
パーツ名だけではそれがなんなのかマニュアル動画を見ないとわからないので完璧ではないですね。
でも、組み立てのときに必要なパーツを探すのがだいぶ楽でした。
(どのパーツがどの梱包に入っているかパーツリストから分かる)
組み立て時間は10hくらいです。
組み立て 組み立てはSDカード内の組み立て用動画を見ながら作業します。 マニュアル類を共有する許可を頂いたのでどんな感じか確認下さい。
  組み立て手順は紙媒体じゃなく動画になっており言葉が不要だといえる感じです。
わかりやすい。事前に全体を見てからのほうが作業時に迷いが減ります。
以下に動画リストを置いておきます
flyingbear P902 組み立てマニュアル(非公式) 
パーツリストが凄く便利です。
アルミレールの切断時の削り節がそのまま残っているのは困りました。
これって掃除機で吸い込んで大丈夫なんですかね。
削った後がそのまま残っていて危ないです。
マイナスドライバーで無理やり削って対応しました。
ネジは種類ごとに袋詰されていていい感じです。
惜しむらくはネジの種類がわかるように何か書いていてほしかった。
ノギスで長さとか太さを図って推測するしかないです。 まぁ間違えなかったみたいです。
ただ袋の強度が弱いのか、最初から穴が空いていたのか袋の中身が飛び出るので予め補強しておいたほうが良さそうです。
上記のボックス部分はちゃんとガタツキがないか確認しておいたほうがいいです。
実はちょっとガタついてしまいました。全部品を組み込んでからの調整は面倒なのでここはしっかり組み立てたほうがいいです。
エクストルーダも既に組み立て済みです。正直拍子抜け 難しい部分はすべて組み立て済みとか
重要な部品なのか射出成形品です
コレも射出成形品です
ENDSTOPも必要なところは組み込み済み。
とてもかんたんにキャリッジが組み立て終わりました。
Your browser does not support the video tag.  動作確認でスムーズに動くか確認します。
上記はz axis fixed blockという部品です。
この部品は下記にあるZ軸の固定用のブロックなのですがコレだけはロッドと大きさがぎりぎり合わず
ヤスリがけしました。ちょっとやすれば入るので4つを頑張ってヤスリがけ。
本当にギリギリ合わない感じなのでちょっとやすれば入るようになります。
Z軸もOK Z軸用のENDSTOPはこの製品には珍しく3DPrinter出力されたものでした。
flyingbearで出力したんでしょうか？
ヒートベットも取り付けます。すぐ印刷できるようにブルーテープがすでに貼ってあります。
SDカードにtest用のデータも置いてあるので完成後すぐに動作確認できるのが凄くいいです。
恐らくロッド固定用でイモネジを入れる穴だと思うんですが説明書に指示がなかったので組立時は放置しています
(あとでイモネジ入れておきました。)</description>
    </item>
    
  </channel>
</rss>