<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 楽しいことしかやりたくない。</title>
    <link>https://m0a.github.io/post/</link>
    <description>Recent content in Posts on 楽しいことしかやりたくない。</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 23 Jan 2018 13:27:06 +0900</lastBuildDate>
    
	<atom:link href="https://m0a.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Taiyaqの使いかた</title>
      <link>https://m0a.github.io/post/taiyaq-howtouse/</link>
      <pubDate>Tue, 23 Jan 2018 13:27:06 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/taiyaq-howtouse/</guid>
      <description>インストール 現状ではChrome専用です。 こちらからChrome-extensionを導入します
とりあえず、インストールが終わると以下のTaiyaqアイコンが表示されます。
こうなればインストールが正常に完了しています。 では何かを翻訳してみましょう。
ちょっとだけQiitaにて話題になっているNimのサイトを翻訳してみます。
https://nim-lang.org/
翻訳方法 上記サイトのフッター部分にサイトのライセンスが表記されています。
the content of this page is licensed under the Creative Commons Attribution 3.0 license.  どうやら翻訳しても問題ないライセンスのようです。 翻訳対象は作者の許可を得るか、翻訳しても問題ないライセンス表記のものを選んで下さい。 (非公開設定のまま翻訳することも可能です)
Taiyaqアイコンをクリックしてサイドメニューを表示します。
翻訳がまだ無いようです。 新規作成を押すと対訳情報が作成されます。
上記の様に分割した翻訳ができるのでそれぞれを翻訳していきます。
翻訳したい箇所をクリックすると絞り込んで一覧に表示する機能もあります。
こんな感じで翻訳できます。
翻訳情報の公開 翻訳したら皆で共有しましょう
サイドメニューの自作翻訳タブを選ぶと現在の翻訳作業中の一覧がでます。
詳細編集を選んで追加情報を記入して下さい 保存したらアップロードをクリックしてアップロードを行います。 尚アップロードするためにはGoogleアカウントが必要です。無ければ事前に登録しておいて下さい。
公開するために公開状態にチェックを入れるのを忘れないでください。 ライセンスの問題が不明ならばひとまず、非公開のままでも構いません。
サイドサイドメニューが開くと公開設定した翻訳一覧が表示できるようになります。 ありがとうございました。
翻訳を押しておくと次回からその翻訳ファイルを使って翻訳するようになります。 リロードしても自動で翻訳することを確認して下さい。
より便利に使うオプション こちらにアクセスして Google翻訳の為のAPI Keyを取得します。
上記の有効にするをクリックします。
適当なプロジェクト名を付けて下さい。
上記 認証情報を作成 をクリックして、
上記 API キーを作成します。
キーの制限もかけておきます。
自身のグローバルIPを設定しておきます。
APIキーをコピーしておきます
Taiyaq -&amp;gt; 設定からgoogle翻訳のAPIキーの箇所に先ほど作成したAPIキーを貼り付けます。
各対訳をGoogle翻訳で翻訳できるようになります。</description>
    </item>
    
    <item>
      <title>Taiyaq(対訳蓄積ツール)を作った</title>
      <link>https://m0a.github.io/post/taiyaq-test-release/</link>
      <pubDate>Tue, 23 Jan 2018 11:45:40 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/taiyaq-test-release/</guid>
      <description>注意:まだベータリリース段階です。
英語ができなくてもエンジニアとしてなんとかなりたい。 React.jsが話題になって久しく、 日本でも色々なプロダクトにだいぶ使われている気がしますが、
ググってみると本家のサイトの順位はこんな感じだったりしますよね
(2018/1/19現在)。
Googleの検索結果を観ると英語ができなくて悩んでいるエンジニアは結構たくさんいるんじゃないかな。と 先ずReactについて知りたいと思ったら、ググってQiitaの記事に当たることになります。 でも、それって 最新のライブラリに追従している内容ですかね？
自分もQiitaの記事は書きますけどぶっちゃけ最新版に追従することなく放置気味だったりします。😨
そこでChrome-extensionとして、Taiyaq(対訳蓄積ツール)なるものを作りました。
これを使うと本家のページをこんな感じで翻訳してくれます。
仕組み 至って単純でコンテンツを分解して、分割単位ごとで対訳を作るだけです。
とりあえず以下からアクセスすると翻訳対象に移動して翻訳できます。
https://taiyaq.com/contents/m1OrKPbZv80XsmKLX9ly8XEZe
ポイントは対訳を作って皆で共有するという点です。
対訳ということは部分的な一致で翻訳を得られるということです。 例えば、ライブラリであれば、仕様変更は一部でありドキュメントも変更は一部です。
つまり対訳として前のバージョンのドキュメントでも利用できる点はあるはずです。
翻訳できない対訳のみ英語のままで、翻訳できる部分は翻訳するという動作を行います。
つまり古い翻訳は翻訳として使われず、最新の英語ドキュメントを読んでいることを保証できるわけです。
使いかたに関しても纏めました</description>
    </item>
    
    <item>
      <title>octoprintをbitbarを使って便利にしよう</title>
      <link>https://m0a.github.io/post/octoprint001/</link>
      <pubDate>Tue, 28 Mar 2017 23:12:01 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/octoprint001/</guid>
      <description>octoprintを便利に使うためにbitbarのプラグインを作りました。 多分linux環境(Gnome環境？)でも、
argosなどで使えると思います
見ての通りbitbarとはメニューバーを簡単に拡張できる機能のことです。 mac限定なのが悲しい。
こちらにプラグインへのリンクを置きますね。
https://getbitbar.com/plugins/Tools/octoprint.1m.sh</description>
    </item>
    
    <item>
      <title>flyingbearのエクストルーダを改造しました。</title>
      <link>https://m0a.github.io/post/flyingbear-p902-004/</link>
      <pubDate>Thu, 02 Mar 2017 21:17:40 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/flyingbear-p902-004/</guid>
      <description>flyingbearは値段の割にとても素敵なプリンタですが、色々調整しないとなかなか性能が出ません
今回のエクストルーダ改造はかなりいい感じでしたのでここに纏めてみます。
はじめに 先ず今回の改造はどういう方針かといいますと。 バレルを3cm延長し空間を作りその隙間からシロッコファンで送風するように改造します。 したがってデメリットがあります。
ズバリ
Z方向の印刷範囲が3cm小さくなります。
ですが結果は劇的でした。
そしてオーバーハングのテストがこちら
赤フィラメントが改造前のflyingbear(途中で印刷中止)
茶色フィラメントが改造後です。
70度以降に乱れがありますか積層0.1で行ったためです。0.05で試せばまた変わるかもしれません。
追加で必要な部品について 改造したSTLはthigiverseで公開中です。 改造に必要なものは以下の通り
   追加内容 個数 リンク 金額 備考     プリントパーツ 2 thingiverse 0円    シロッコファン 5015S 1 aliexpress 200円    50mm バレル 1 aliexpress 122円    M6 Nut or heatsink 4 aliexpress 909円 ヒートシンクの代用になるもの   シロッコファン固定用木ネジ 2 その辺のホームセンター 300円 flyingbear付属のネジを参考に購入    aliexpressのお陰で1500円くらいで素材は揃います。aliexpressは本当に便利です。</description>
    </item>
    
    <item>
      <title>octoprintのタイムラプスをstreamableに自動アップロード</title>
      <link>https://m0a.github.io/post/up2streamable001/</link>
      <pubDate>Tue, 28 Feb 2017 15:07:34 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/up2streamable001/</guid>
      <description>octoprintをつかってタイムラプスを取るのは楽しいですが、
どうにもサイズがでかいのでSDカードを逼迫するような気もします。
ところでstreamableってサービスをご存知でしょうか？
imgurの動画版みたいなやつです。
とりあえず動画をアップして共有しようというサービスです。
そこでこいつに自動アップロードする機能をoctoprintにつけられないかな？と思いました。
作りました。
golangのライブラリが提供されていたのでアホみたいに簡単なので、 正直ツール化する意味はあるのかという気もしますが。
先ずはstreamable/signupからアカントを作っておきます。
そうしないと削除できないので。
octoprintが動いているサーバ(raspberypiかorangepi等のarm環境限定です)から以下のコマンドで取得します
またoctoprintを動かすユーザはoctoprintだと仮定しています
sudo su - octoprint cd ~/bin wget https://github.com/m0a/up2streamable/releases/download/0.1/up2streamable chmod +x up2streamable  以下のコマンドを実行します
up2streamable -path ~/.octoprint/timelapse -u userid -p password  ~/.octoprint/timelapseに動画が格納されていればuploadが成功します
成功したらcronで設定しておきます。
 HOME=/home/octoprint */15 * * * * $HOME/bin/up2streamable -path $HOME/.octoprint/timelapse -u username -p password -delete  以上です。オプションに -deleteを指定することで自動削除します。
 </description>
    </item>
    
    <item>
      <title>OrangePi liteをつかってプリンタにwifi機能をつけよう(Ansible使って自動化するよ)</title>
      <link>https://m0a.github.io/post/orange-pi-lite/</link>
      <pubDate>Thu, 03 Nov 2016 14:45:15 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/orange-pi-lite/</guid>
      <description>OrangePi Liteを買いました。名刺サイズながら最初からWifiが搭載されているやつです。
早速wifiを有効化させるところまで纏めましたが、Qiitaではいまいち人気がない様子。
気を取り直して、当初の目的であるOctoPrintを導入します。 ラズパイみたいな人気のやつの場合は最初からOctoPiというのがありまして SDカードにイメージを入れるだけで全部入りの環境が手に入ります。
でもこいつは安いのが魅力。本体だけなら1200円くらいです。
OctoPiほどではないけどAnsibleをつかって全自動で構築まで持っていきましょう。 仮にSDが壊れても瞬時に復旧できるように。
Ansibleって 自分のPCからOrangePiにsshアクセスして自動で必要なコマンドやファイルコピーを行って 環境を自動構築してくれるツールです。こいつを使えば、SDにイメージを焼く程にすぐには出来ませんが
待ってれば環境を作ってくれます。
wifiの設定までは自動化出来ず。 ということで少なくともssh接続できるように
wifi経由でsshできる状態まで設定しておく必要があります。
その手順はQiitaに纏めましたのでご参照下さい
OrangePi LiteのWIFI設定(armbian)
固定Ipを使ったほうがいいでしょうね。
Ansibleの準備 macであればbrewコマンドで簡単にインストールできます。 windowsの場合も最近はlinux環境があるそうなんで簡単じゃないでしょうか？ macなら以下で入ると思います。
 brew install ansible  windowsは自分で調べて下さい。ubuntu環境を手元に作れるはずです。
構築開始 必要なファイルをgitで取得します。
 ❯ git clone https://github.com/m0a/octoprint_armbian.git ❯ cd octoprint_armbian  接続するときのipを設定します
 ❯ cat hosts [octoprint_server] 192.168.11.111  ここを自分の設定したOrangePiのipに変えて下さい
sudo時のパスワードを設定しておきます。
 ❯ cat group_vars/octoprint_server.yml ansible_sudo_pass: p@ssword octoprint_version: 1.2.17 ....... %  p@sswordのところを適時変えて下さい
後はオプションでバージョンの変更をして下さい(octoprint_versionにTagを指定できます。)
コレで構築開始です。
 ❯ ansible-playbook -i hosts playbook.</description>
    </item>
    
    <item>
      <title>Marlinを改造して残り時間を表示させたい</title>
      <link>https://m0a.github.io/post/modify_marlin/</link>
      <pubDate>Tue, 18 Oct 2016 20:22:31 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/modify_marlin/</guid>
      <description>同じことを考えている人はいる。
Display time remaining on the LCD screen ?
SDカードの読み取り状況と現状の印刷時間から逆算する方針なら情報は出揃っているから簡単でした。
実装結果 Marlinのコードはこちらにあります。 flyingbearP902用の設定になっています https://github.com/m0a/flyingbearMarlin/archive/lcd_kai.zip
実際のところSDカードの進捗は正確ではなくコレを元に印刷時間を表示するとあまり正確な値にならない。
ただ後半90%以上進行するとまぁまぁ正確にはなる(当たり前か)
M73というGCODEをMarlinに実装すると正確になるかもしれない。
変更内容 ちょっとテスト的に弄ったものも含まれています。
あと中華ArduinoだったせいかBAUDRATEも25000では上手く動かず115200に変更しています
diff --git a/Marlin/Configuration.h b/Marlin/Configuration.h index ad869b7..a730543 100644 --- a/Marlin/Configuration.h +++ b/Marlin/Configuration.h @@ -113,7 +113,7 @@ // This determines the communication speed of the printer // :[2400,9600,19200,38400,57600,115200,250000] -#define BAUDRATE 250000 +#define BAUDRATE 115200 // Enable the Bluetooth serial interface on AT90USB devices //#define BLUETOOTH @@ -126,7 +126,7 @@ // Optional custom name for your RepStrap or other custom machine // Displayed in the LCD &amp;quot;Ready&amp;quot; message -//#define CUSTOM_MACHINE_NAME &amp;quot;3D Printer&amp;quot; +#define CUSTOM_MACHINE_NAME &amp;quot;Flyingbear&amp;quot; // Define this to set a unique identifier for this printer, (Used by some programs to differentiate between machines) // You can use an online service to generate a random UUID.</description>
    </item>
    
    <item>
      <title>flyingbear改善</title>
      <link>https://m0a.github.io/post/flyingbear-p902-003/</link>
      <pubDate>Fri, 07 Oct 2016 21:53:52 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/flyingbear-p902-003/</guid>
      <description>今の環境のスナップショットの図
買ってからしばらく経ちました。genkei ATOMよりビルドエリアが広がってCADの自由度が増えました(歓喜)
早速色々変更しましたので纏めてみることにしました
ヒートベットの改善 初期状態ではビルドプレートにブルーシールが貼ってあります。
今回使っていてとてもいいものだとは思いましたがシールが壊れたら新規に購入しなくてはいけません。
しかも張替えが面倒くさいのです。
そこでATOMを使っていた頃に培った方法をまとめさせていただきます
用意したもの
   品名 購入先 お値段     スタンドミラー ダイソー ¥108   スティックのり amazon ¥76   無水エタノール amazon ¥1,280    特にスタンドミラーなんですがかなりフィットしてます。
最初ガラス加工業者にお願いしようとしたところ一枚¥2,100とのことでした。高い、、、、
ちょっと合わなくても十分です
ミラーの加工 加工は簡単です。 筐体部分を外してむき出しにするだけです。
角の安全加工がれてないのでご注意下さい
使い方 ピットのりを使うのはよくある話だと思いますが
自分の場合、それだけでは上手く行かず無水エタノールと組み合わせて使うことにしました。
まず無水エタノールは使いやすいように瓶詰めにしておきます
できればピット乗りにエタノールをつけるのに便利な大きさがいいです
コレは試しに用意したでけで使いづらかったです。
要はノリをエタノールで薄めて薄く塗りつける感じです
今はブルーシールが貼ってある状態で上に乗せて使っています。
メリットとデメリット メリット  面倒くさいカプトンテープ（もしくはブルーテープ）の張替えが要らない ガラス板の数だけ素早く載せ替えが可能なのですぐに次の印刷ができる メンテナンスが簡単。使えないとと思ったらノリを水道で洗い流すだけ 印刷物の取り外しが簡単  デメリット  ガラスが割れやすいかも  印刷物の取り外しが簡単の理由はガラス板は熱で伸び縮みがあるので 冷却すると自然に剥がれるのです。ほんとうに便利。
ヒートベットの改善#2 ヒートベットが広くなった分加熱に時間がかかるので背面に断熱材を貼って改善します。
ここでもやっぱりダイソーです。
日本にはダイソーがあるので3Dプリンタの普及が進まないというのはあながち嘘じゃないのかもしれないです。</description>
    </item>
    
    <item>
      <title>ヘッド直結型エクストルーダの扱い</title>
      <link>https://m0a.github.io/post/flyingbear-p902-002/</link>
      <pubDate>Fri, 30 Sep 2016 15:55:43 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/flyingbear-p902-002/</guid>
      <description>早速壊したかと思いました。 flyingbearはエクストルーダが最初から構築済みだったので楽でしたが
その分中の仕組みがわからず、壊れたときに対処できないという問題があります。
これまで使ってきた Genkei ATOMさんはbowden方式のエクストルーダで
今回のflyingBearはヘッド直結型のエクストルーダとなります。
その違いをわかっておらずbowdenタイプと同じようにフィラメントを抜いて取り替えたら大変なことに。
動かなくなりました。中で多分詰まってます。
上記2箇所のネジを外すとノズルの入り口にアクセスできます。
お分かりでしょうか？
ノズルの入り口に曲がって詰まっているフィラメントが現れました。
コレが邪魔して新たにフィラメントが挿入できない事態になっていました。
恐らく引き抜いたときにフィラメントが伸びて入り口に残ってしまったみたいです。
直結型の場合はフィラメントを引き抜いたりしないほうが良さそうです
仕方ないので更にアクセスしやすくするため他の部品も取り除きます
ノズルの温度を205度にあげて入口付近のの残ったフィラメントを抜き取り(ちぎり取り？)
新しいフィラメントを押し込んで通ることを確認します
せっかくなのでエクストルーダが開放状態でフィラメントを通しておきます。
学んだこと 直結型はフィラメントを抜かない。てことですかね。
とりあえずネジ二本抜けばエクストルーダにアクセスできることはわかったので良かったです。</description>
    </item>
    
    <item>
      <title>FlyingBear組み立てレポート</title>
      <link>https://m0a.github.io/post/flyingbear-p902-001/</link>
      <pubDate>Fri, 30 Sep 2016 08:25:40 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/flyingbear-p902-001/</guid>
      <description>flyingbear P902 を買ってみました。購入 &amp;amp; 組み立てレポートをしてみます。
どんな風に届いて、どんな感じで組み立てたかをご覧ください。
届くまで 注文したのが17日なので12日で届きました。送料無料なのに速いです。
テープでぐるぐる巻きにされていて地味に開けるのがめんどかったです
パーツリストが含まれていてその場で梱包漏れをチェックできる！
と思ったんですが
パーツ名だけではそれがなんなのかマニュアル動画を見ないとわからないので完璧ではないですね。
でも、組み立てのときに必要なパーツを探すのがだいぶ楽でした。
(どのパーツがどの梱包に入っているかパーツリストから分かる)
組み立て時間は10hくらいです。
組み立て 組み立てはSDカード内の組み立て用動画を見ながら作業します。 マニュアル類を共有する許可を頂いたのでどんな感じか確認下さい。
  組み立て手順は紙媒体じゃなく動画になっており言葉が不要だといえる感じです。
わかりやすい。事前に全体を見てからのほうが作業時に迷いが減ります。
以下に動画リストを置いておきます
flyingbear P902 組み立てマニュアル(非公式) 
パーツリストが凄く便利です。
アルミレールの切断時の削り節がそのまま残っているのは困りました。
これって掃除機で吸い込んで大丈夫なんですかね。
削った後がそのまま残っていて危ないです。
マイナスドライバーで無理やり削って対応しました。
ネジは種類ごとに袋詰されていていい感じです。
惜しむらくはネジの種類がわかるように何か書いていてほしかった。
ノギスで長さとか太さを図って推測するしかないです。 まぁ間違えなかったみたいです。
ただ袋の強度が弱いのか、最初から穴が空いていたのか袋の中身が飛び出るので予め補強しておいたほうが良さそうです。
上記のボックス部分はちゃんとガタツキがないか確認しておいたほうがいいです。
実はちょっとガタついてしまいました。全部品を組み込んでからの調整は面倒なのでここはしっかり組み立てたほうがいいです。
エクストルーダも既に組み立て済みです。正直拍子抜け 難しい部分はすべて組み立て済みとか
重要な部品なのか射出成形品です
コレも射出成形品です
ENDSTOPも必要なところは組み込み済み。
とてもかんたんにキャリッジが組み立て終わりました。
Your browser does not support the video tag.  動作確認でスムーズに動くか確認します。
上記はz axis fixed blockという部品です。
この部品は下記にあるZ軸の固定用のブロックなのですがコレだけはロッドと大きさがぎりぎり合わず
ヤスリがけしました。ちょっとやすれば入るので4つを頑張ってヤスリがけ。
本当にギリギリ合わない感じなのでちょっとやすれば入るようになります。
Z軸もOK Z軸用のENDSTOPはこの製品には珍しく3DPrinter出力されたものでした。
flyingbearで出力したんでしょうか？
ヒートベットも取り付けます。すぐ印刷できるようにブルーテープがすでに貼ってあります。
SDカードにtest用のデータも置いてあるので完成後すぐに動作確認できるのが凄くいいです。
恐らくロッド固定用でイモネジを入れる穴だと思うんですが説明書に指示がなかったので組立時は放置しています
(あとでイモネジ入れておきました。)</description>
    </item>
    
    <item>
      <title>cardboard_ue4</title>
      <link>https://m0a.github.io/post/cardboard_ue4/</link>
      <pubDate>Wed, 09 Dec 2015 00:48:32 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/cardboard_ue4/</guid>
      <description>UE4で手軽にVRを試そうと思ったらcardboardだよね～
と思って調べてみたらver.4.10現在(2015-12-09)では未対応な模様
oculusRift とか gearVR は全然手軽じゃない。
cardboardとは Google CardBoard V2.0
上記にリンクが有ります。 いつの間にか磁石式じゃなくなっているみたいですね
要はスマホにレンズつけて無理やりVRってことです。
プラグインを作っている人はいるみたいだけどリリースはまだのようです。
PROJECT:UNREAL4CARDBOARD
なんか現状で試せる方法はないかなーと探していたらUE4のフォーラムに、
サンプルプロジェクトを置いていました。スレッドの一番最初のコメントにリンクが有ります。 https://forums.unrealengine.com/showthread.php?87236
ちゃんとNexus5(第一世代)で動作しました
シンプルなその仕組み 多分キモはここです。
上記のローカル対戦の設定で画面分割の設定で二人対戦するように設定してありました。 後はロジックとしてBluePrintでPlayerを一人追加しPlyer0と動きを同期するってことみたいです。 これで一応cardboardで見てみるとちゃんとVRしてました。すごいです。
とりあえずこれで遊んでみることにします。
ついでに ちょっとフライングしてこんなのも買ってみました
http://www.amazon.co.jp/gp/product/B00ZR3BVLW/ref=oh_aui_detailpage_o00_s00?ie=UTF8&amp;amp;psc=1
どうなるかな。</description>
    </item>
    
    <item>
      <title>Blenderで粘土細工のようにオブジェクトを改造する</title>
      <link>https://m0a.github.io/post/studying_blender001/</link>
      <pubDate>Tue, 25 Aug 2015 00:55:55 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/studying_blender001/</guid>
      <description>はじめに OnShape等のCADを使っていると無味乾燥な形状ばかり印刷しがちです。
ところが、BlenderでOnShapeで作った形状を改造してみるとなんとも味わい深い形状が作れました。
こんな感じでOnShapeでダイスを作ります。
なんてこともないのでなんの感動もないです。
これがこうなります。
これを印刷すると3DPrinterの印刷痕の規則正しさと相まって実に趣深いことになります
ここに印刷結果を出そうと思いましたが、黒いフィラメントしか無く、写真写りが悪いため断念しています。
(そのうち貼る)
Blenderとは 簡単にいえばフリーの3DCGソフトです。 CADと違い映画やゲームのオブジェクト作成を目的としているため、 アニメーションの為の機能などが組み込まれています。 動画があるのでそちらを見るとどんな事ができるか想像できるかと思います。
  こちらからダウンロードできます。 http://www.blender.org/download/
目標設定 とにかくなんでもできるツールなので正直使うのが難しく、実は自分は過去に何度も挫折してます。 そこで、特定の機能に特化してそこの使い方だけを学ぶことにします。 ズバリ粘土細工機能(sclupt)だけを触ります。
Blender事始め とはいえ、基本操作だけは覚えていたほうが良さそうです。 チートシートを手に入れておきましょう Blenderを起動します。
とりあえずこれだけ覚えておきます。
   マウス＆キー　 動作内容     マウス中ボタンドラッグ 視点移動(回転)   Shift + マウス中ボタンドラッグ 視点移動(並行移動)   マウスホイール操作 視点移動(拡大縮小)   マウス右クリック オブジェクト選択   マウス右ドラック オブジェクト移動(左クリックで確定)   マウス左クリック Cursor移動    中央の3DView画面と呼ばれる箱が表示されている画面でこの表の操作が可能です。 試してみましょう
ひと通り試したら右クリックで箱を選択し、xで削除します。
間違って左クリックすると カーソル が原点から移動しているかと思います。</description>
    </item>
    
    <item>
      <title>親指シフト入力を始める。Mac＆USキーボードで</title>
      <link>https://m0a.github.io/post/oyayubishiftinput/</link>
      <pubDate>Wed, 19 Aug 2015 11:07:25 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/oyayubishiftinput/</guid>
      <description>はじめに backspacefmというポッドキャストを聞いていたところ親指シフト入力の話があり、 すごく惹かれてしまいました。自分のメインマシンはMacでUSキーボードですが、これでも始められるという話を聞いたので、 始めてみることにしました。
親指シフト入力とは 日本語の文章を入力する上で『効率』と『使いやすさ』のバランスを再設計するために、いくつかの検討と実験を行ったうえで「一つのアクションが、一つのかなに対応する」方法 だそうです。 (wikipediaより)
打鍵数がひらがなと一致するのでローマ字入力と比べると半分近くに減ることになります。 正直今のタイピングもエセブラインドタイピングなので、体得できるか試してみることにします(6/23記載)。
学んで3ヶ月目の感想 完全にbackspace.fmの売り文句に騙されましたw。
「考えるスピードで文字が打てるようになるよ。」
多分考える速度で打てるようになるにはまだ精進が必要ということなんでしょう。 普段使いできるレベルに到達した感想は「ローマ字入力とあんまり変わらないです」。
入力ミスが完全になくなったら再検証 してみます。
学んだプロセス で、どうやって学んだかを紹介します。 ちなみに普通に使えるレベルに到達するには練習を毎日30分しても３ヶ月はかかります。 なので覚悟が必要だと思います。仕事にならないという覚悟がw
設定 いい記事がありました。まさに自分用設定でしたので、この様に進めます。 http://qiita.com/mochi/items/5b44169db7b3a76d3da1
ローマ字入力の封印 正直体に染み込んだローマ字脳のせいで気を抜くと身体がローマ字を打とうとするので 脳内がリセットされるまで、封印するしかないです。 Karabinerを絶対終了しないようにしました。
まずはキーの並びから記憶術で覚える 最初は体で覚えるだろうって期待して手元にキー配列表を置き作業的に打ち込み練習しましたが、遅々として覚えず絶望します。 (３日続けましたが覚えませんでした)
思うに、キーボード配列に規則性がないので自然に覚えるのはかなり酷です。 いわゆる身体で覚えるという手が使えないんですよね。少なくとも最初のうちは。 特にローマ字入力時の反射神経が邪魔してくるので、上手く行きません。
マツコの知らない世界 で記憶術の回があり、それをヒントに並びを覚えます。
こんな感じで覚えました。(一部抜粋) 重要なのはストーリーが頭に思い浮かぶような語呂合わせが良いみたいです。 「鳩が棋院で囲碁さしてる」なんて一瞬で覚えました。 逆に牛とか単語単位の語呂合わせは簡単に忘れてしまいます。 実際に使う予定の方はこの語呂合わせ検討に時間をしっかり取ったほうが後々良い結果が出ます。
後は小脳に書き換わるまでは、常にストーリーを思い出しながらキーを打ちます。
アプリを作った。 ひたすらキーを打ち続けるしかないんですが、正直今までできでたことができなくなってるんで モチベーションの維持が難しいです。
基本的には下記リンクにある練習テキストを打ち続けるしかないのですが、 時間を記録してタイプスピードが上がるのを確認するしかないんです。
http://nicola.sunicom.co.jp/olddoc/nicolaha.html
そこでMac版ですがアプリを作ることにしました。 このアプリを作っているうちに体得してしまったので今はモチベが下がり完成してないですがそのうち公開します。
e-typingで練習 macはソフトの力で内部的に親指シフト入力をローマ字入力に変換しているため、 ローマ字入力の練習サイトがそのまま使えます こちらのサイトが特にオススメです
http://www.e-typing.ne.jp/member/
やはりモチベーションを上げるためにも、実際に成長できるか確認できるサイトを使いたいところです
まだ全国平均にも届いていないみたいです。</description>
    </item>
    
    <item>
      <title>メガネ作った。二回目。</title>
      <link>https://m0a.github.io/post/glasses2/</link>
      <pubDate>Wed, 24 Jun 2015 17:22:03 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/glasses2/</guid>
      <description> ２代目となるメガネを作ったので公開します。 onShapeで作成し、 データもtingiverseにて公開してます。
1代目との違いは、下記のようにレンズとサイドフレームをネジでサンドイッチする構造にしたことです。 おかげで、印刷後の調整がらくになりました。
データのリンクはこちら
 onShape https://cad.onshape.com/documents thingiverse http://www.thingiverse.com/thing:895662  ついでに onShapeのcompareいい！ １代目との差分を表示してます。 </description>
    </item>
    
    <item>
      <title>橋下さん政治家引退表明撤回要求の署名活動をしてみます。</title>
      <link>https://m0a.github.io/post/hashimoto_intai_hantai/</link>
      <pubDate>Wed, 20 May 2015 14:47:52 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/hashimoto_intai_hantai/</guid>
      <description>署名サイトを使った政治活動をやってみた。 ぶっちゃけると、橋下さんのファンです。 youtubeで橋下さんの動画をたまに見ていて、メディアとの戦いっぷりを見て、楽しむのが趣味の一つになっていたりします。
5/17の大阪都構想住民投票の行方も見守っていて、開票率98%でもどちらに転ぶかわからない状況にクラクラしていました。
結果は残念でしたが、橋下さんが政治家やめるというのは正直納得出来ないと考えています。 そこで前々から存在を知っていた署名サイトを使って呼びかけてみることにしました。 以下がリンクです。
www.change.org
それにしても、ちょっとした政治活動をネットを使うと行えるというのは便利ですね。 世の中にはロビー活動を行う活動家というのがいるらしいですが、 そういう怪しい人？(偏見です。すいません)を使うより、よっぽど健全で楽しいと思います。
こういう仕組みがどんどん出てくれればいいのにと思いました。(というか作れって話ですね・・・)</description>
    </item>
    
    <item>
      <title>3DPrinter自作01</title>
      <link>https://m0a.github.io/post/mydiyprinter20150517/</link>
      <pubDate>Sun, 17 May 2015 20:39:59 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/mydiyprinter20150517/</guid>
      <description>onShapeで設計してみました。
onShapeはWebアプリなCADなのでアセンブリ画面で実際に触ることができちゃいます。
 こちらからアクセスできます
実際に自作プリンター製作記の開始と行きたいものですがどうなるかは未定です。</description>
    </item>
    
    <item>
      <title>Genkei ATOMのカスタムパーツを作りました。</title>
      <link>https://m0a.github.io/post/genkei-atom-customize/</link>
      <pubDate>Sun, 17 May 2015 10:24:49 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/genkei-atom-customize/</guid>
      <description>genkei ATOMを使っています。 3DPrinter2機種目です。1機種目は引越し時に捨ててしまいました。
（後から部品取りに使うなりいろいろ手があっただろうと後悔）
とにかく、購入して1年経過しましたが、thingiverseのデータを印刷してみただけとか、
使いこなし切れてなかったんですが、onShapeをきっかけに、結構なんでも作れるようになってきました。
それで作ってみたのがこちら。
X軸周りのパーツを印刷しやすくしたパーツです。
3DPrinterはとにかく、オーバーハングしたパーツを印刷するのが苦手です。
サポート材を付けて印刷することで、解決は出来るんですが、あとでサポート材を外すのが大変だったりします。
特にPLAの場合は辛い。
なので、極力サポート材を付けずに印刷できるようなにしたほうが後々メンテ性が高いと思い、作った次第です。
で、作ったのがこちら。
 x_moter
 x_end_a
 x_carriage_lm_a b c 一体型
  thingiverseからダウンロードできます。
onShapeのデータも公開してます。</description>
    </item>
    
    <item>
      <title>メガネ作った</title>
      <link>https://m0a.github.io/post/glasses/</link>
      <pubDate>Sat, 16 May 2015 22:20:29 +0900</pubDate>
      
      <guid>https://m0a.github.io/post/glasses/</guid>
      <description>メガネを作ったんです。 メガネのフレームのネジを無くしたので、3Dプリンタでメガネを作りました。 作るのに3人日位かかりました。買ったほうが早いです。
でもonShapeの使い方を覚えられたし、 必要は発明の母？なんか違いますが。
うまく出来てよかった。
身体に身につけてるので、俺３Dプリンタ触ってるんだアピールにピッタリ
thingverseにもアップしてます。 http://www.thingiverse.com/thing:790898
onShapeのデータも公開してます。 https://cad.onshape.com/documents/6a39e60d71ae4d19ae0e66ac/w/525a50b6016f42d58042b1b0/e/73dcc89cdd2248e1846706b4</description>
    </item>
    
  </channel>
</rss>